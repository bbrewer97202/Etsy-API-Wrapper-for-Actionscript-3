/*************************************************************************************** * EtsyAPIRequest * AS3 Wrapper for the Etsy API * * @author bbrewer * @version .2 Mar 13, 2009, updated for 03-09-05 API changes *  * Copyright (c) 2009 Ben Brewer (ben.brewer.pdx@gmail.com) *  * Permission is hereby granted, free of charge, to any person * obtaining a copy of this software and associated documentation * files (the "Software"), to deal in the Software without * restriction, including without limitation the rights to use, * copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the * Software is furnished to do so, subject to the following * conditions: *  * The above copyright notice and this permission notice shall be * included in all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR * OTHER DEALINGS IN THE SOFTWARE. ***************************************************************************************/package com.thunderfarm.etsy.api {		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;		/***************************************************************************************	 * Wrapper for Etsy API	 ***************************************************************************************/	public class EtsyAPIRequest extends EventDispatcher {				private var _key:String;		private var _loader:URLLoader;				private var _lastResult:Object;				public static const BASE_URL:String = "http://beta-api.etsy.com/v1/";		public static const COMPLETE:String = "onComplete";				/***************************************************************************************		 * CONSTRUCTOR		 * @param key required api key		 ***************************************************************************************/			public function EtsyAPIRequest(key:String) {						_key = key;						//loader init			_loader = new URLLoader();			_loader.dataFormat = URLLoaderDataFormat.TEXT;							//request events			_loader.addEventListener(Event.COMPLETE, onRequestComplete);			_loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, onHTTPStatus);			_loader.addEventListener(IOErrorEvent.IO_ERROR, onRequestIOError);			_loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);								}		/***************************************************************************************		 * destructor		 ***************************************************************************************/			public function destroy():void {						_loader.removeEventListener(Event.COMPLETE, onRequestComplete);			_loader.removeEventListener(HTTPStatusEvent.HTTP_STATUS, onHTTPStatus);			_loader.removeEventListener(IOErrorEvent.IO_ERROR, onRequestIOError);			_loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);											_loader = null;			_lastResult = null;		}		/***************************************************************************************		 * Get the details of a user.		 * @param id User ID		 * @param options optional object with additional parameters 		 ***************************************************************************************/		public function getUserDetails(id:String, options:Object = null):void {			sendRequest("users/" + id, options);		}		/***************************************************************************************		 * Search active users alphabetically by user_name.		 * @param name search string		 * @param options optional object with additional parameters		 ***************************************************************************************/		public function getUsersByName(name:String, options:Object = null):void {			sendRequest("users/keywords/" + name, options);		}		/***************************************************************************************		 * Get the details of a seller's shop.		 * @param id shop id		 * @param options optional object with additional parameters		 ***************************************************************************************/		public function getShopDetails(id:String, options:Object = null):void {			sendRequest("shops/" + id, options);		}		/***************************************************************************************		 * Get a list of all the featured sellers.		 * @param options optional object with additional parameters		 ***************************************************************************************/		public function getFeaturedSellers(options:Object = null):void {			sendRequest("shops/featured", options);		}		/***************************************************************************************		 * Get all the listings in a shop.		 * @param id shop id		 * @param options optional object with additional parameters		 ***************************************************************************************/		public function getShopListings(id:String, options:Object = null):void {			sendRequest("shops/" + id + "/listings", options);		}		/***************************************************************************************		 * Search all active shops sorted alphabetically by user_name.		 * @param name seach string		 * @param options optional object with additional parameters		 ***************************************************************************************/		public function getShopsByName(name:String, options:Object = null):void {			sendRequest("shops/keywords/" + name, options);		}		/***************************************************************************************		 * Get the expanded details on featured listings of a shop, ordered by highest ranked featured item.		 * @param id shop id		 * @param options optional object with additional parameters		 ***************************************************************************************/		public function getFeaturedDetails(id:String, options:Object = null):void {			sendRequest("shops/" + id + "/listings/featured", options);		}		/***************************************************************************************		 * Get all active listings on Etsy.		 * @param options optional object with additional parameters		 ***************************************************************************************/		public function getAllListings(options:Object = null):void {			sendRequest("listings/all", options);		}		/***************************************************************************************		 * Get the details of a listing.		 * @param id listing id		 * @param options optional object with additional parameters		 ***************************************************************************************/		public function getListingDetails(id:String, options:Object = null):void {			sendRequest("listings" + id, options);		}		/***************************************************************************************		 * Search for listings by tag.		 * @param tag search string		 * @param options optional object with additional parameters		 ***************************************************************************************/		public function getListingsByTags(tag:String, options:Object = null):void {			sendRequest("listings/tags/" + tag, options);		}				/***************************************************************************************		 * Search for listings by average color of primary image.		 * @param color search string		 * @param options optional object with additional parameters		 ***************************************************************************************/		public function getListingsByColor(color:String, options:Object = null):void {			sendRequest("listings/color/" + color, options);		}						/***************************************************************************************		 * Search for listings by keywords and average color of primary image.		 * @param color search string		 * @param keywords search string		 * @param options optional object with additional parameters		 ***************************************************************************************/		public function getListingsByColorAndKeywords(color:String, keywords:String, options:Object = null):void {			sendRequest("listings/color/" + color + "/keywords/" + keywords, options);		}						/***************************************************************************************		 * Search for listings by keyword.		 * @param terms search string		 * @param options optional object with additional parameters		 ***************************************************************************************/		public function getListingsByKeyword(terms:String, options:Object = null):void {			sendRequest("listings/keywords/" + terms, options);		}		/***************************************************************************************		 * Search for listings by materials used.		 * @param search string		 * @param options optional object with additional parameters		 ***************************************************************************************/		public function getListingsByMaterials(materials:String, options:Object = null):void {			sendRequest("listings/materials/" + materials, options);		}				/***************************************************************************************		 * Get the featured listings on the front page for the current day.		 * @param options optional object with additional parameters		 ***************************************************************************************/		public function getFrontFeaturedListings(options:Object = null):void {			sendRequest("listings/featured/front", options);		}		/***************************************************************************************		 * Get the list of current top level categories.		 ***************************************************************************************/		public function getTopCategories():void {			sendRequest("categories");		}				/***************************************************************************************		 * Get the child categories of a category.		 ***************************************************************************************/		public function getChildCategories(category:String):void {			sendRequest("categories/" + category + "/children");		}				/***************************************************************************************		 * Get the list of current top level tags 		 ***************************************************************************************/		public function getTopTags():void {			sendRequest("tags");		}		/***************************************************************************************		 * Get the child categories of a tag.		 ***************************************************************************************/		public function getChildTags(tag:String):void {			sendRequest("tags/" + tag + "/children");		}		/***************************************************************************************		 * Get all the users who call this user a favorite.		 * @param id user id		 * @param options optional object with additional parameters		 ***************************************************************************************/		public function getFavorersOfShop(id:String, options:Object = null):void {			sendRequest("shops/"+ id + "/favorers", options);		}		/***************************************************************************************		 * Get all the users who call this listing a favorite.		 * @param id listing id		 * @param options optional object with additional parameters		 ***************************************************************************************/		public function getFavorersOfListing(id:String, options:Object = null):void {			sendRequest("listings/"+ id + "/favorers", options);		}		/***************************************************************************************		 * Get the favorite shops of a user.		 * @param id user id		 * @param options optional object with additional parameters		 ***************************************************************************************/		public function getFavoriteShopsOfUser(id:String, options:Object = null):void {			sendRequest("users/" + id + "/favorites/shops", options);					}		/***************************************************************************************		 * Get the favorite listings of a user.		 * @param id user id		 * @param options optional object with additional parameters		 ***************************************************************************************/		public function getFavoriteListingsOfUser(id:String, options:Object = null):void {			sendRequest("users/" + id + "/favorites/listings", options);				}		/***************************************************************************************		 * Get a feedback record		 * @param id feedback id		 ***************************************************************************************/		public function getFeedback(id:String):void {			sendRequest("feedback/" + id);				}		/***************************************************************************************		 * Get a list of all feedback for a particular user		 * @param id user id		 * @param options optional object with additional parameters 		 ***************************************************************************************/		public function getFeedbackForUser(id:String, options:Object = null):void {			sendRequest("users/" + id + "/feedback", options);				}				/***************************************************************************************		 * Get a list of all feedback where the user was a buyer in the transaction.		 * @param id user id		 * @param options optional object with additional parameters 		 ***************************************************************************************/		public function getFeedbackAsBuyer(id:String, options:Object = null):void {			sendRequest("users/" + id + "/feedback/buyer", options);				}		/***************************************************************************************		 * Get a list of all feedback where the user was a seller in the transaction.		 * @param id user id		 * @param options optional object with additional parameters 		 ***************************************************************************************/		public function getFeedbackAsSeller(id:String, options:Object = null):void {			sendRequest("users/" + id + "/feedback/seller", options);				}				/***************************************************************************************		 * Get a list of all feedback that the user left feedback for someone else.		 * @param id user id		 * @param options optional object with additional parameters 		 ***************************************************************************************/		public function getFeedbackForOthers(id:String, options:Object = null):void {			sendRequest("users/" + id + "/feedback/others", options);				}				/***************************************************************************************		 * Get a list of gift guides.		 ***************************************************************************************/		public function getGiftGuides():void {			sendRequest("gift-guides");		}		/***************************************************************************************		 * Get the listings in a gift guide.		 * @param id gift guide id		 * @param options optional object with additional parameters		 ***************************************************************************************/		public function getGiftGuideListings(id:String, options:Object = null):void {			sendRequest("gift-guides/" + id + "/listings", options);		}		/***************************************************************************************		 * Get a list of all methods available.		 ***************************************************************************************/		public function getMethodTable():void {			sendRequest("");		}		/***************************************************************************************		 * Check that the server is alive.		 ***************************************************************************************/		public function ping():void {			sendRequest("server/ping");		}		/***************************************************************************************		 * Get server time, in epoch seconds notation.		 ***************************************************************************************/		public function getServerEpoch():void {			sendRequest("server/epoch");		}		/***************************************************************************************		 * make an API request		 ***************************************************************************************/		private function sendRequest(type:String, parameters:Object = null):void {			var url:String = BASE_URL + type + "?api_key=" + _key;												var request:URLRequest;			//(re)set data collector about last event			_lastResult = new Object();						//add request variables to be passed			for (var c:String in parameters) {				url += "&" + c + "=" + parameters[c];							}							//make request			request = new URLRequest(url);						request.method = URLRequestMethod.GET;				trace("EtsyAPIRequest: " + request.url);			_loader.load(request);					}					/***************************************************************************************		 * handle loader request complete event		 * @param event object		 ***************************************************************************************/		private function onRequestComplete(event:Event):void {						_lastResult.results = URLLoader(event.target).data;			_lastResult.text = "";			dispatchEvent(new EtsyAPIRequestEvent(EtsyAPIRequest.COMPLETE, _lastResult.httpStatus, _lastResult.results, _lastResult.text));					}				/***************************************************************************************		 * handle HTTP status events during course of request		 * @param event HTTPStatusEvent		 ***************************************************************************************/		private function onHTTPStatus(event:HTTPStatusEvent):void {									_lastResult.httpStatus = event.status;		}				/***************************************************************************************		 * handle loader reqest IO error event		 * dispatches complete event with non-standard http status of 0 to indicate I/O error		 * @param event IOError Event		 ***************************************************************************************/		private function onRequestIOError(event:IOErrorEvent):void { 						_lastResult.httpStatus = 0;			_lastResult.text = event.text;			dispatchEvent(new EtsyAPIRequestEvent(EtsyAPIRequest.COMPLETE, _lastResult.httpStatus, _lastResult.results, _lastResult.text));		} 		/***************************************************************************************		 * handle security error events		 * dispatches complete event with non-standard http status of 0 to indicate security error		 * @param event SecurityErrorEvent		 ***************************************************************************************/		private function onSecurityError(event:SecurityErrorEvent):void { 						_lastResult.httpStatus = 0;			_lastResult.text = event.text;			dispatchEvent(new EtsyAPIRequestEvent(EtsyAPIRequest.COMPLETE, _lastResult.httpStatus, _lastResult.results, _lastResult.text));		} 	}}	